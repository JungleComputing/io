<project name="ibis-io" default="build" basedir=".">
    <description>
	Build file for ibis-io
    </description>

    <!-- Global properties -->
	<target name="properties" description="Setup all the properties for building">
    	<property name="src" location="src" />
    	<property name="tmp" location="tmp" />
		<property name="tmpsrc" location="tmpsrc" />
    	<property name="lib" location="lib" />
		<property name="res" location="res" />
    	<property name="javadoc" location="javadoc" />
    	<property name="external" location="external" />
    	<property name="sources" value="sources" />

    	<property name="version" value="-2.0" />
	
    	<property name="jar" location="${lib}/${ant.project.name}${version}.jar" />
    	<property name="sources-filename" value="${ant.project.name}${version}" />
	
   		<path id="external_jars">
    	    <fileset dir="${external}">
        	    <include name="*.jar" />
        		<exclude name="log4jME*.jar" />
        		<exclude name="j2meunit*.jar" />
        		<exclude name="antenna-*.jar" />
	        </fileset>
	    </path>
	
	</target>
		
	<target name="properties-jme" description="Set all the properties for JME building" depends="properties">
		<property name="jmejar" location="${lib}/${ant.project.name}-jme${version}.jar" />
		<property name="jme-sources-filename" value="${ant.project.name}-jme${version}" />
	
		<property name="jmetestjar" location="${lib}/${ant.project.name}-jme-test${version}.jar" />
		<property name="jmetestjad" value="${ant.project.name}-jme-test${version}.jad" />
		<property name="jme-test-sources-filename" value="${ant.project.name}-jme-test${version}" />
	
		<!-- Setup antenna for building the JME stuff -->
		<taskdef resource="antenna.properties" classpath="${external}/antenna-bin-1.0.0.jar"/>
		<!-- What versions of JME we target. This is the minimum we can support. -->
    	<property name="wtk.cldc.version" value="1.1"/>
    	<property name="wtk.midp.version" value="2.0"/>
		<property name="wtk.optionalpda.enabled" value="true" />
		
		<property name="jmejavadoc" location="jmejavadoc" />

		<!-- Jars used for building JME version -->
		<path id="jme_build_jars">
			<fileset dir="${external}">
				<include name="log4jME*.jar" />
				<include name="j2meunit*.jar" />
			</fileset>
		</path>
			
		<path id="jme_rewrite_jars">
			<fileset dir="${external}">
				<include name="ibis*.jar" />
				<include name="bcel*.jar" />
				<include name="log4jME*.jar" />
				<include name="j2meunit*.jar" />
			</fileset>
			<pathelement path="${lib}/${jar}" />
		</path>
			
		<path id="jme_run_jars">
			<fileset dir="${external}">
				<include name="log4jME*.jar" />
				<include name="j2meunit*.jar" />
			</fileset>
			<pathelement path="${lib}/${jmetestjar}" />
		</path>
	</target>
	
	<target name="build" description="Build the ibis-io distribution." depends="build-jse,build-jme" />
	
    <target name="build-jse" description="Build the standard edition version of ibis-io" depends="clean,properties-jme">
    	<!-- Create the time stamp -->
        <tstamp />

        <!-- Create the build directory structure used by compile -->
        <delete dir="${tmp}" />
    	<delete dir="${javadoc}" />

        <mkdir dir="${tmp}" />
    	<mkdir dir="${tmpsrc}" />
        <mkdir dir="${lib}" />
        <mkdir dir="${javadoc}" />
        <mkdir dir="${sources}" />

        <!-- Collect all the source into one place. -->
        <copy todir="${tmpsrc}">
        	<fileset dir="${src}"
        		excludes="ibis/io/jme/**,ibis/io/test/**"
        	/>
        </copy>
    	
        <!-- Compile the java code from ${src} into ${tmp} -->
        <javac srcdir="${tmpsrc}" destdir="${tmp}" debug="on">
            <classpath refid="external_jars" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>

        <!-- Create the distribution directory -->
        <mkdir dir="${lib}" />


        <!-- create the javadoc -->
        <javadoc destdir="${javadoc}" access="public">
            <packageset dir="${tmpsrc}" />
            <classpath refid="external_jars" />
            <link href="http://logging.apache.org/log4j/docs/api/" />
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
        </javadoc>

        <!-- Put everything in ${tmp} into the jar file -->
        <jar jarfile="${jar}" basedir="${tmp}">
	    	<manifest>
			<attribute name="Ibisc-Component" value="ibis.io.rewriter.IOGenerator"/>
	    	</manifest>
		</jar>

        <!-- create a zip file with the sources -->
        <zip destfile="${sources}/${sources-filename}.zip">
            <zipfileset dir="${tmpsrc}"
                        includes="**/*.java"
                        prefix="${sources-filename}" />
            <zipfileset dir="."
                        includes="LICENSE.txt"
                        prefix="${sources-filename}" />
        </zip>

        <!-- And delete the build dir -->
        <delete dir="${tmp}" />
    	<delete dir="${tmpsrc}" />
    </target>

    <target name="build-jme" depends="build-jse,properties-jme" description="Build the micro edition version of ibis-io">
    	<!-- Check the WTK environment variable -->
		<property environment="env"/>
		<property name="wtk.home" value="${env.WTK_HOME}"/>
	    <condition property="empty.wtk.home">
	    		<equals arg1="\$\{env.WTK_HOME\}" arg2="${env.WTK_HOME}"/>
	    </condition>
    	<fail if="empty.wtk.home" message="Please set WTK_HOME in your environment." />
    	
		<echo>Using Wireless Toolkit In: ${wtk.home}</echo>
    	
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Create the build directory structure used by compile -->
    	<delete dir="${tmpsrc}" />
        <delete dir="${tmp}" />
        <delete dir="${jmejavadoc}" />

        <mkdir dir="${tmp}" />
    	<mkdir dir="${tmpsrc}" />
        <mkdir dir="${lib}" />
        <mkdir dir="${jmejavadoc}" />
        <mkdir dir="${sources}" />

    	<!-- Collect all the source into one place. 
    		 This is required since wtkbuild doesn't respect includes properly -->
    	<copy todir="${tmpsrc}">
    		<fileset dir="${src}"
    			includes="ibis/io/SerializationInput.*,ibis/io/SerializationOutput.*,ibis/io/DataInput.*,ibis/io/DataOutput.*,ibis/io/Replacer.*,ibis/io/jme/**" 
    		/>
    	</copy>
    	
        <!-- create the javadoc -->
        <javadoc destdir="${jmejavadoc}" access="public">
            <packageset dir="${tmpsrc}">
              <include name="ibis/io/jme/**"/>
            </packageset>
            <classpath refid="jme_build_jars" />
            <link href="http://logging.apache.org/log4j/docs/api/" />
          	<link href="http://java.sun.com/javame/reference/apis/jsr139/" />
            <link href="http://java.sun.com/javame/reference/apis/jsr118/" />
        </javadoc>
    	
        <!-- Compile the java code from ${tmpsrc} into ${tmp} -->
    	<wtkbuild srcdir="${tmpsrc}"
    		source="1.3" debug="off" target="1.3" destdir="${tmp}" >
    		    	<classpath refid="jme_build_jars" />
    	</wtkbuild>   	
    	
    	<!-- Rewrite the JME sources
    	<java classname="ibis.compile.Ibisc" taskname="Ibisc" failonerror="true" maxmemory="512m" dir="${tmp}" fork="true">
    	            <arg line="-verbose -jme ." />
    				<classpath refid="jme_rewrite_jars" />
    	</java>
    	 -->
    	
        <!-- Create the distribution directory -->
        <mkdir dir="${lib}" />

        <!-- Put everything in ${tmp} into the jar file -->
        <jar jarfile="${jmejar}" basedir="${tmp}">
	    	<manifest>
				<attribute name="Ibisc-Component" value="ibis.io.rewriter.IOGenerator"/>
	    	</manifest>
		</jar>

        <!-- create a zip file with the sources -->
        <zip destfile="${sources}/${jme-sources-filename}.zip">
            <zipfileset dir="${tmpsrc}"
                        includes="**/*.java"
                        prefix="${jme-sources-filename}" />
            <zipfileset dir="."
                        includes="LICENSE.txt"
                        prefix="${jme-sources-filename}" />
        </zip>

        <!-- And delete the build dir -->
        <delete dir="${tmp}" />
    	<delete dir="${tmpsrc}" />
    </target>
	
	<target name="build-jme-tests" description="Compile the jme test suite" depends="build-jme">
    	<!-- Check the WTK environment variable -->
		<property environment="env"/>
		<property name="wtk.home" value="${env.WTK_HOME}"/>
	    <condition property="empty.wtk.home">
	    		<equals arg1="\$\{env.WTK_HOME\}" arg2="${env.WTK_HOME}"/>
	    </condition>
    	<fail if="empty.wtk.home" message="Please set WTK_HOME in your environment." />
    	
		<echo>Using Wireless Toolkit In: ${wtk.home}</echo>
    	
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Create the build directory structure used by compile -->
    	<delete dir="${tmosrc}" />
        <delete dir="${tmp}" />
        <delete dir="${jmejavadoc}" />

        <mkdir dir="${tmp}" />
    	<mkdir dir="${tmpsrc}" />
        <mkdir dir="${lib}" />
        <mkdir dir="${jmejavadoc}" />
        <mkdir dir="${sources}" />

    	<!-- Collect all the source into one place. 
    		 This is required since wtkbuild doesn't respect includes properly -->
    	<copy todir="${tmpsrc}">
    		<fileset dir="${src}"
    			includes="a/**,ibis/io/SerializationInput.*,ibis/io/SerializationOutput.*,ibis/io/DataInput.*,ibis/io/DataOutput.*,ibis/io/Replacer.*,ibis/io/jme/**,ibis/io/test/jme/**" 
    		/>
    	</copy>
    	
        <!-- Compile the java code from ${src} into ${tmp} -->
    	<wtkbuild srcdir="${tmpsrc}"
    		source="1.3" debug="on" target="1.3" destdir="${tmp}" >
    		    	<classpath refid="jme_build_jars" />
    	</wtkbuild>   	
    	
    	<!-- Rewrite the JME sources -->
    	<java classname="ibis.compile.Ibisc" taskname="Ibisc" failonerror="true" maxmemory="512m" dir="${tmp}" fork="true">
    	            <arg line="-verbose -jme ." />
    				<classpath refid="jme_rewrite_jars" />
    	</java>
    	
		<!-- Unzip the junit stuff -->
		<unzip src="${external}/j2meunit.jar" dest="${tmp}"/>
		
		<!-- Preverify the tests -->
    	<wtkpreverify srcdir="${tmp}" destdir="${tmp}">
    		<classpath refid="jme_build_jars" />
    	</wtkpreverify>
		
        <!-- Create the distribution directory -->
        <mkdir dir="${lib}" />
		
        <!-- Put everything in ${tmp} into the jar file -->
        <jar jarfile="${jmetestjar}" basedir="${tmp}">
	    	<manifest>
	    		<attribute name="MIDlet-Name" value="Ibis IO Benchmarks" />
	    		<attribute name="MIDlet-Version" value="1.0"/>
	    		<attribute name="MIDlet-Vendor" value="cs.vu.nl"/>
	    		<attribute name="MicroEdition-Configuration" value="CLDC-1.1" />
	    		<attribute name="MicroEdition-Profile" value="MIDP-2.0" />
				<attribute name="MIDlet-1" value="New Becnhmarks, App.png, ibis.io.test.jme.bench.BenchmarkMIDlet" />
	    	</manifest>
		</jar>

        <!-- create a zip file with the sources -->
        <zip destfile="${sources}/${jme-test-sources-filename}.zip">
            <zipfileset dir="${tmpsrc}"
                        includes="**/*.java"
                        prefix="${jme-test-sources-filename}" />
            <zipfileset dir="."
                        includes="LICENSE.txt"
                        prefix="${jme-test-sources-filename}" />
        </zip>

        <!-- And delete the build dir -->
        <delete dir="${tmp}" />
    	<delete dir="${tmpsrc}" />
	</target>

	<target name="run-jme-tests" depends="build-jme-tests" description="run the JME test suite">
		<java classname="j2meunit.textui.TestRunner" taskname="TestRunner" failonerror="true" fork="true">
			<!-- jvmarg line="-verbose:class" / -->
			<arg line="ibis.io.test.jme.IOTestSuite" />
			<classpath refid="jme_run_jars" />
			<bootclasspath>
				<path path="${wtk.home}/lib/midpapi.zip" />
			</bootclasspath>
		</java>
	</target>
	
	<target name="run-jme-benchmarks" depends="build-jme-tests" description="run the JME benchmark suite">
		<java classname="j2meunit.textui.TestRunner" taskname="TestRunner" failonerror="true" fork="true">
			<!-- jvmarg line="-verbose:class" / -->
			<arg line="ibis.io.test.jme.bench.PerformanceTestSuite" />
			<classpath refid="jme_run_jars" />
			<bootclasspath>
				<path path="${wtk.home}/lib/midpapi.zip" />
			</bootclasspath>
		</java>
	</target>
	
    <target name="clean" description="clean up" depends="properties">
        <delete dir="${lib}" />
        <delete dir="${tmp}" />
    	<delete dir="${tmpsrc}" />
        <delete dir="${javadoc}" />
        <delete dir="${sources}" />
        <delete dir="${jmejavadoc}" />
    </target>


</project>
